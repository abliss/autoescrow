package rps;

message Player {
    // public key for verifying this player's signatures
    optional string pubKey = 1;
    // BTC address to receive player's winnings
    optional string address = 2;
}

message GameHeader {
    // hash of the evaluator object for this game
    optional string evaluator = 1;
    // who is playing the game
    repeated Player players = 2;
    // fixed fee for the autoescrow server for handling this game, in satoshi
    optional uint64 rake = 3;
    // hash of a recent block in the bitcoin blockchain, establishing timestamp
    optional bytes blockStamp = 4;
    // maximum time length of a turn, in bitcoin blocks
    optional uint32 blockLimit = 5;
    // To uniquify this game
    optional uint32 nonce = 6;
}


// The spud-salt-hash system is a method for extracting simultaneous choices in
// a specified range [0..r]. First, each player chooses a secret choice number
// in the range.  The player then chooses 32 random bytes and adds them to the
// choice to produce a Salt.  The player now hashes the Salt and publishes the
// hash in the turn chain.  Once all players have published hashes, each player
// in turn reveals the secret Salt and publishes it to the turn chain.  The Salt
// is verified against the previous hash, and the choice is extracted.
message Salt {
    optional uint32 choice = 1;
    optional bytes random = 2;
}
message Turn {
    // Index of the player making this turn
    optional uint32 who = 1;
    // A hash of a secret salt, which will be revealed in this player's next turn.
    optional bytes hash = 2;
    // the Salt corresponding to this player's last hash.
    optional Salt salt = 3;
    // a public, non-simultaneous choice.
    optional uint32 choice = 4;
}

message GameState {
    // The GameHeader object
    optional gameHeader gameHeader = 1;
    // The turn chain, which grows monotonically
    repeated Turn turns = 2;
}

message SignedGameState {
    // The GameState to be signed
    optional GameState gameState = 1;
    // one signature from each player, approving the last GameState they saw.
    // When = gameState.turns.length == 0, each player i signs the gameHeader in
    // signatures[i], signifying their willingness to play the game. Afterwards,
    // each time player[i] adds a turn to the turn chain, e also updates
    // signatures[i] by signing the gameHeader followed by all the turns up to
    // and including the new one.
    repeated bytes signatures = 2;
}
